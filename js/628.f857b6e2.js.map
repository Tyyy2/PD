{"version":3,"file":"js/628.f857b6e2.js","mappings":"mRAiBO,MAAMA,EAAwDC,OAAOC,IAAI,6BAE1EC,EAAkB,CAAC,UAAW,YAAa,QAAS,UAI7CC,GAAmBC,EAAAA,EAAAA,KAAAA,CAAmB,CACjDC,KAAM,mBAENC,MAAO,CACLC,MAAOC,OACPC,QAAS,CACPC,KAAMF,OACNG,QAAS,UACTC,UAAYC,GAAWX,EAAgBY,SAASD,IAElDE,SAAUC,YAEPC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,OAGLC,MAAO,CACL,oBAAsBC,IAAiB,GAGzCC,MAAOhB,EAAKiB,GAAa,IAAX,MAAEC,GAAOD,GACrBE,EAAAA,EAAAA,IAASnB,EAAOP,GAEhB,MAAM,aAAE2B,IAAiBC,EAAAA,EAAAA,IAAarB,GAEhCsB,GAAeC,EAAAA,EAAAA,KAAS,IAAMvB,EAAMG,SAAY,+BAA8BH,EAAMG,YAsB1F,OApBAqB,EAAAA,EAAAA,IAAgB,CACdC,gBAAiB,CACfxB,OAAOyB,EAAAA,EAAAA,IAAM1B,EAAO,UAEtB2B,qBAAsB,CACpBlB,UAAUiB,EAAAA,EAAAA,IAAM1B,EAAO,gBAI3B4B,EAAAA,EAAAA,IAAU,KAAAC,EAAAA,EAAAA,IAAA7B,EAAA8B,IAAA,OAEC,CACL,qBACAV,EAAaW,MACbT,EAAaS,QAELb,KAIP,CAAC,CACV,I,8DC5CK,MAAMc,GAAgCC,EAAAA,EAAAA,GAAa,CACxDhC,MAAOC,OACPgC,WAAY,CACV9B,KAAM+B,EAAAA,GACN9B,QAAS,WAEX+B,aAAc,CACZhC,KAAM+B,EAAAA,GACN9B,QAAS,aAEXgC,YAAa3B,QACb4B,OAAQ,CACNlC,KAAM,CAACM,QAAS6B,QAChBlC,SAAS,GAEXI,SAAUC,SACT,2BAEUiB,GAAuB7B,EAAAA,EAAAA,KAAAA,CAA8C,CAChFC,KAAM,uBAENyC,WAAY,CAAEC,OAAMA,EAAAA,GAEpBzC,MAAO,IACFgC,KAGLhB,MAAOhB,EAAKiB,GAAa,IAAX,MAAEC,GAAOD,EACrB,MAAMyB,GAAiBC,EAAAA,EAAAA,IAAOlD,GAE9B,IAAKiD,EAAgB,MAAM,IAAIE,MAAM,iFAErC,MAAM,uBAAEC,EAAsB,sBAAEC,IAA0BC,EAAAA,EAAAA,IAAmB/C,EAAO,SAE9EgD,GAAYzB,EAAAA,EAAAA,KAAS,KAAM,CAC/Ba,aAAcpC,EAAMoC,aACpBa,SAAUP,EAAeO,SAASlB,MAClCmB,SAAUR,EAAeS,WAAWpB,MACpCG,WAAYlC,EAAMkC,WAClBzB,SAAUT,EAAMS,aAmClB,OAhCAmB,EAAAA,EAAAA,IAAU,KAAAwB,EAAAA,EAAAA,KAAAvB,EAAAA,EAAAA,IAAC,SAAD,OAEC,CACL,0BACA,CACE,kCAAmCa,EAAeS,WAAWpB,OAE/Dc,EAAuBd,OACxB,MACOe,EAAsBf,MAAK,KAC9B,SAAQ,SACFW,EAAeO,SAASlB,OAAS,OAAIsB,EAAS,SAC9CX,EAAeO,SAASlB,MAAK,gBACxBW,EAAeS,WAAWpB,MAAK,QACpC/B,EAAMS,cAAmC4C,EAAxBX,EAAeY,QAAkB,EAAAzB,EAAAA,EAAAA,IAAA,cAGjD,oCAAkC,MAE5CX,EAAMb,UAAU2C,EAAUjB,QAEzB/B,EAAMqC,cAAWR,EAAAA,EAAAA,IAAA,cACN,iCAA+B,CAEvCX,EAAMqC,QAAUrC,EAAMqC,QAAQP,EAAUjB,QAAMF,EAAAA,EAAAA,IAAA2B,EAAAA,EAAA,MAC9Bd,EAAeS,WAAWpB,MAAQ/B,EAAMoC,aAAepC,EAAMkC,YAAU,UAG5F,GAAAuB,EAAAA,EAAAA,IAAA,UAbUzD,EAAMsC,YAiBd,CAAC,CACV,I,kCC5FK,MAAMoB,GAAsB5D,EAAAA,EAAAA,KAAAA,CAAmB,CACpDC,KAAM,sBAENC,MAAO,KACF2D,EAAAA,EAAAA,MAGL3C,MAAOhB,EAAKiB,GAAa,IAAX,MAAEC,GAAOD,EACrB,MAAMyB,GAAiBC,EAAAA,EAAAA,IAAOlD,GAE9B,IAAKiD,EAAgB,MAAM,IAAIE,MAAM,gFAErC,MAAM,WAAEgB,EAAU,aAAEC,IAAiBC,EAAAA,EAAAA,GAAQ9D,EAAO0C,EAAeS,YAiBnE,OAfAvB,EAAAA,EAAAA,IAAU,KAAAC,EAAAA,EAAAA,IAAAkC,EAAAA,GAAA,cAC0BF,GAAY,CAAAxD,QAAAA,IAAA,EAAA+C,EAAAA,EAAAA,KAAAvB,EAAAA,EAAAA,IAAA,aAEpC,0BAAwB,CAG5BX,EAAMb,SAAWuD,EAAW7B,QAAKF,EAAAA,EAAAA,IAAA,aACtB,mCAAiC,CACxCX,EAAMb,gBAEX,EAAA2D,EAAAA,GANQtB,EAAeS,WAAWpB,cAWlC,CAAC,CACV,I,wBClBK,MAAMN,GAAkB3B,EAAAA,EAAAA,KAAAA,CAAyC,CACtEC,KAAM,kBAENC,MAAO,CACLiE,MAAO/D,OACPgE,KAAMhE,OACNiE,QAASjE,WAENkE,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,UACAV,EAAAA,EAAAA,SACAW,EAAAA,EAAAA,SACA1D,EAAAA,EAAAA,QACAoB,KAGLlB,MAAO,CACL,iBAAmBC,IAA4B,GAGjDC,MAAOhB,EAAKiB,GAAa,IAAX,MAAEC,GAAOD,EACrB,MAAMsD,GAAYC,EAAAA,EAAAA,IAAaxE,EAAOP,IAChC,uBAAEoD,EAAsB,sBAAEC,IAA0BC,EAAAA,EAAAA,IAAmB/C,EAAO,YAC9E,iBAAEyE,IAAqBC,EAAAA,EAAAA,GAAa1E,IACpC,eAAE2E,IAAmBC,EAAAA,EAAAA,GAAW5E,GAChC6E,GAAatD,EAAAA,EAAAA,KAAS,IAAMgD,GAAWtB,SAASlB,OAAS/B,EAAMiD,WAE/D6B,GAAkBvD,EAAAA,EAAAA,KAAS,IAAMgD,EAAUQ,MAAMC,MAAMjD,MAAMkD,QAAiB,CAACC,EAAKC,EAAMC,KAC1Fb,EAAUQ,MAAMM,SAAStD,MAAMvB,SAAS2E,EAAKG,KAAKJ,EAAIK,KAAKH,GACxDF,IACN,MAEGM,GAAmBjE,EAAAA,EAAAA,KAAS,KAChC,MAAM6D,EAAQb,EAAUQ,MAAMC,MAAMjD,MAAM0D,WAAUN,GAAQA,EAAKG,KAAOf,EAAUe,KAClF,OAAQf,EAAUpB,WAAWpB,OAC3B+C,EAAgB/C,MAAM2D,MAAKC,GAAiBA,EAAgBP,IAAU,GAAE,IAGtEQ,GAAkBrE,EAAAA,EAAAA,KAAS,KAC/B,MAAM6D,EAAQb,EAAUQ,MAAMC,MAAMjD,MAAM0D,WAAUN,GAAQA,EAAKG,KAAOf,EAAUe,KAClF,OAAQf,EAAUpB,WAAWpB,OAC3B+C,EAAgB/C,MAAM2D,MAAKC,GAAiBA,EAAgBP,KAAW,GAAE,IAwD7E,OArDAS,EAAAA,EAAAA,IAAQpG,EAAuB8E,IAE/B3C,EAAAA,EAAAA,IAAU,KACR,MAAMkE,KAAa5E,EAAMgD,OAAQlE,EAAMkE,MACjC6B,KAAc7E,EAAM+C,QAASjE,EAAMiE,OAEzC,OAAApC,EAAAA,EAAAA,IAAA7B,EAAA8B,IAAA,OAEW,CACL,oBACA,CACE,4BAA6ByC,EAAUpB,WAAWpB,MAClD,mCAAoCyD,EAAiBzD,MACrD,kCAAmC6D,EAAgB7D,MACnD,8BAA+B8C,EAAW9C,OAE5C4C,EAAe5C,MACfc,EAAuBd,OACxB,MACOe,EAAsBf,MAAK,gBACnBwC,EAAUpB,WAAWpB,OAAK,CAAA1B,QAAAA,IAAA,EAAAwB,EAAAA,EAAAA,IAAA,aAGjC,CACL,+BACG4C,EAAiB1C,QACrB,MAGDgE,IAAQlE,EAAAA,EAAAA,IAAAF,EAAA,KAEF,QAAO,aACI3B,EAAMoC,aAAY,MACzBpC,EAAMC,MAAK,WACND,EAAMkC,WAAU,YACflC,EAAMqC,YAAW,OACtBrC,EAAMsC,QAAM,CAAAjC,QAAAA,IAAA,CAEnBa,EAAM+C,MAAQ/C,EAAM+C,QAAUjE,EAAMiE,SAIxC6B,IAAOjE,EAAAA,EAAAA,IAAA6B,EAAA,KACkB,OAAM,MAAS1D,EAAMgG,OAAK,CAAA3F,QAAAA,IAAA,CAC/Ca,EAAMgD,KAAOhD,EAAMgD,OAASlE,EAAMkE,QAItChD,EAAMb,cAAW,IAKlB,CAAC,CACV,I,qIClEF,MAAM4F,GAAQC,EAAAA,EAAAA,MACRC,GAAMC,EAAAA,EAAAA,MAENC,GAAe9E,EAAAA,EAAAA,KAAS,IACnB0E,EAAMK,MAAMC,cAAcC,QAAO,SAAUrB,GAC9C,OAAOA,EAAK/E,MAAQ+F,EAAIpE,KAC5B,M,kkDC1DJ,MAAM0E,EAAc,EAEpB,O,+HCSO,MAAMC,GAAW5G,EAAAA,EAAAA,KAAAA,CAAmB,CACzCC,KAAM,WAENC,MAAO,CACLC,MAAOC,OACPyG,MAAOjG,QACPkG,OAAQ,CAACC,OAAQ3G,QACjB4G,UAAW,CAACD,OAAQ3G,QACpB6G,SAAUrG,YAEPG,EAAAA,EAAAA,OAGLG,MAAOhB,EAAKiB,GAAa,IAAX,MAAE+F,GAAO/F,EACrB,MAAM,aAAEG,IAAiBC,EAAAA,EAAAA,IAAarB,IAChC,iBAAEiH,EAAgB,gBAAEC,IAAoBC,EAAAA,EAAAA,KAAazF,EAAAA,EAAAA,IAAM1B,EAAO,UAClEoH,GAAgB7F,EAAAA,EAAAA,KAAS,KAC7B,MAAM8F,EAAwB,CAAC,EAU/B,OARIrH,EAAM4G,SACRS,EAAOrH,EAAM+G,SAAW,YAAc,aAAcO,EAAAA,EAAAA,IAActH,EAAM4G,SAGtE5G,EAAM8G,YACRO,EAAOrH,EAAM+G,SAAW,mBAAqB,mBAAoBO,EAAAA,EAAAA,IAActH,EAAM8G,YAGhFO,CAAM,IA2Bf,OAxBAzF,EAAAA,EAAAA,IAAU,KAAAC,EAAAA,EAAAA,IAAC,KAAD,OAEC,CACL,CACE,aAAa,EACb,mBAAoB7B,EAAM2G,MAC1B,sBAAuB3G,EAAM+G,UAE/B3F,EAAaW,MACbkF,EAAiBlF,OAClB,MACM,CACLqF,EAAcrF,MACdmF,EAAgBnF,OACjB,mBAEEiF,EAAMO,MAAuB,cAAfP,EAAMO,UAEjBlE,EADArD,EAAM+G,SAAW,WAAa,aACrB,KAER,GAAEC,EAAMO,MAAQ,eAAa,QAIjC,CAAC,CACV,G,gHC9DK,MAAM5D,GAAgB1B,EAAAA,EAAAA,GAAa,CACxC+D,MAAOtF,SACN,QAEI,SAASoD,EAAS9D,EAA2BwH,GAClD,MAAMC,GAAWrB,EAAAA,EAAAA,KAAI,GACfxC,GAAarC,EAAAA,EAAAA,KAAS,IAAMkG,EAAS1F,OAAS/B,EAAMgG,OAASwB,EAAOzF,QAI1E,SAAS8B,IACF7D,EAAMgG,QAAOyB,EAAS1F,OAAQ,EACrC,CAEA,OANA2F,EAAAA,EAAAA,IAAMF,GAAQ,IAAMC,EAAS1F,OAAQ,IAM9B,CAAE0F,WAAU7D,aAAYC,eACjC,C","sources":["webpack://pd/../../../src/components/VExpansionPanel/VExpansionPanels.tsx","webpack://pd/../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx","webpack://pd/../../../src/components/VExpansionPanel/VExpansionPanelText.tsx","webpack://pd/../../../src/components/VExpansionPanel/VExpansionPanel.tsx","webpack://pd/./src/views/QAView.vue","webpack://pd/./src/views/QAView.vue?0523","webpack://pd/../../../src/components/VDivider/VDivider.tsx","webpack://pd/../../src/composables/lazy.ts"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport const VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n\n  props: {\n    color: String,\n    variant: {\n      type: String as PropType<Variant>,\n      default: 'default',\n      validator: (v: any) => allowedVariants.includes(v),\n    },\n    readonly: Boolean,\n\n    ...makeGroupProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color'),\n      },\n      VExpansionPanelTitle: {\n        readonly: toRef(props, 'readonly'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          themeClasses.value,\n          variantClass.value,\n        ]}\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n","// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VIcon } from '@/components/VIcon'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: [ExpansionPanelTitleSlot]\n  actions: [ExpansionPanelTitleSlot]\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false,\n  },\n  readonly: Boolean,\n}, 'v-expansion-panel-title')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: {\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          },\n          backgroundColorClasses.value,\n        ]}\n        style={ backgroundColorStyles.value }\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <span class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </span>\n        ) }\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n","// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          ) }\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n","// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpansionPanelText } from './VExpansionPanelText'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeLazyProps } from '@/composables/lazy'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\nexport type VExpansionPanelSlots = {\n  default: []\n  title: []\n  text: []\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              key=\"title\"\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          ) }\n\n          { hasText && (\n            <VExpansionPanelText key=\"text\" eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          ) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n","<template>\r\n    <v-container class=\"pa-0\">\r\n        <!-- Header -->\r\n        <PDHeader></PDHeader>\r\n\r\n        <!-- Main -->\r\n        <v-main class=\"pt-5\">\r\n            <v-container>\r\n                <v-row>\r\n                    <v-col cols=\"12\" class=\"pb-0\">\r\n                        <h1>常見問題</h1>\r\n                    </v-col>\r\n                    <v-col cols=\"12\" class=\"pt-0\">\r\n                        <v-tabs color=\"blue\" v-model=\"tab\">\r\n                            <v-tab value=\"physiologic\">生理類</v-tab>\r\n                            <v-tab value=\"supplies\">用物類</v-tab>\r\n                            <v-tab value=\"food\">飲食類</v-tab>\r\n                            <v-tab value=\"wound\">導管問題及傷口照護類</v-tab>\r\n                        </v-tabs>\r\n                        <v-divider :thickness=\"2\" color=\"blue\"></v-divider>\r\n                    </v-col>\r\n                </v-row>\r\n\r\n                <v-row>\r\n                    <v-col cols=\"12\">\r\n                        <v-expansion-panels v-for=\"item in filteredList\" :key=\"item.type\"  variant=\"popout\">\r\n                            <v-expansion-panel v-if=\"item.type == tab\" class=\"mb-2\">\r\n                                <!-- 問題標題 -->\r\n                                <v-expansion-panel-title style=\"white-space: pre-line; font-size:18px\">\r\n                                    {{ item.question }}\r\n                                </v-expansion-panel-title>\r\n                                <!-- 問題回答 -->\r\n                                <v-expansion-panel-text style=\"white-space: pre-line; box-shadow:0px 5px 5px gray\">\r\n                                    {{ item.answer }}\r\n                                </v-expansion-panel-text>\r\n                            </v-expansion-panel>\r\n                        </v-expansion-panels>\r\n                    </v-col>\r\n                </v-row>\r\n\r\n            </v-container>\r\n        </v-main>\r\n\r\n        <!-- Footer -->\r\n        <PDFooter></PDFooter>\r\n    </v-container>\r\n</template>\r\n\r\n<script setup>\r\n// components\r\nimport PDHeader from '@/components/PD-Header.vue';\r\nimport PDFooter from '@/components/PD-Footer.vue';\r\nimport { useStore } from 'vuex';//eslint-disable-line\r\nimport { ref, computed } from 'vue';\r\n\r\nconst store = useStore()\r\nconst tab = ref()\r\n\r\nconst filteredList = computed(() => {\r\n    return store.state.question_list.filter(function (item) {\r\n        return item.type == tab.value;\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n</script>\r\n","import script from \"./QAView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./QAView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","// Styles\nimport './VDivider.sass'\n\n// Composables\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, genericComponent, useRender } from '@/util'\n\ntype DividerKey = 'borderRightWidth' | 'borderTopWidth' | 'maxHeight' | 'maxWidth'\ntype DividerStyles = Partial<Record<DividerKey, string>>\n\nexport const VDivider = genericComponent()({\n  name: 'VDivider',\n\n  props: {\n    color: String,\n    inset: Boolean,\n    length: [Number, String],\n    thickness: [Number, String],\n    vertical: Boolean,\n\n    ...makeThemeProps(),\n  },\n\n  setup (props, { attrs }) {\n    const { themeClasses } = provideTheme(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const dividerStyles = computed(() => {\n      const styles: DividerStyles = {}\n\n      if (props.length) {\n        styles[props.vertical ? 'maxHeight' : 'maxWidth'] = convertToUnit(props.length)\n      }\n\n      if (props.thickness) {\n        styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = convertToUnit(props.thickness)\n      }\n\n      return styles\n    })\n\n    useRender(() => (\n      <hr\n        class={[\n          {\n            'v-divider': true,\n            'v-divider--inset': props.inset,\n            'v-divider--vertical': props.vertical,\n          },\n          themeClasses.value,\n          textColorClasses.value,\n        ]}\n        style={[\n          dividerStyles.value,\n          textColorStyles.value,\n        ]}\n        aria-orientation={\n          !attrs.role || attrs.role === 'separator'\n            ? props.vertical ? 'vertical' : 'horizontal'\n            : undefined\n        }\n        role={`${attrs.role || 'separator'}`}\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VDivider = InstanceType<typeof VDivider>\n","// Utilities\nimport { computed, ref, watch } from 'vue'\n\n// Types\nimport type { Ref } from 'vue'\nimport { propsFactory } from '@/util'\n\nexport const makeLazyProps = propsFactory({\n  eager: Boolean,\n}, 'lazy')\n\nexport function useLazy (props: { eager: boolean }, active: Ref<boolean>) {\n  const isBooted = ref(false)\n  const hasContent = computed(() => isBooted.value || props.eager || active.value)\n\n  watch(active, () => isBooted.value = true)\n\n  function onAfterLeave () {\n    if (!props.eager) isBooted.value = false\n  }\n\n  return { isBooted, hasContent, onAfterLeave }\n}\n"],"names":["VExpansionPanelSymbol","Symbol","for","allowedVariants","VExpansionPanels","genericComponent","name","props","color","String","variant","type","default","validator","v","includes","readonly","Boolean","makeGroupProps","makeTagProps","makeThemeProps","emits","val","setup","_ref","slots","useGroup","themeClasses","provideTheme","variantClass","computed","provideDefaults","VExpansionPanel","toRef","VExpansionPanelTitle","useRender","_createVNode","tag","value","makeVExpansionPanelTitleProps","propsFactory","expandIcon","IconValue","collapseIcon","hideActions","ripple","Object","directives","Ripple","expansionPanel","inject","Error","backgroundColorClasses","backgroundColorStyles","useBackgroundColor","slotProps","disabled","expanded","isSelected","_withDirectives","undefined","toggle","actions","VIcon","_resolveDirective","VExpansionPanelText","makeLazyProps","hasContent","onAfterLeave","useLazy","VExpandTransition","_vShow","title","text","bgColor","makeElevationProps","makeGroupItemProps","makeRoundedProps","groupItem","useGroupItem","elevationClasses","useElevation","roundedClasses","useRounded","isDisabled","selectedIndices","group","items","reduce","arr","item","index","selected","id","push","isBeforeSelected","findIndex","some","selectedIndex","isAfterSelected","provide","hasText","hasTitle","eager","store","useStore","tab","ref","filteredList","state","question_list","filter","__exports__","VDivider","inset","length","Number","thickness","vertical","attrs","textColorClasses","textColorStyles","useTextColor","dividerStyles","styles","convertToUnit","role","active","isBooted","watch"],"sourceRoot":""}